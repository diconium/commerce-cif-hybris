{"map":"{\"version\":3,\"file\":\"zenObservable.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/zenObservable.ts\"],\"names\":[],\"mappings\":\"AAEA,OAAO,aAAa,MAAM,gBAAgB,CAAC;AAc3C,MAAM,CAAC,IAAM,UAAU,GAMd,aAAa,CAAC\"}","code":"import zenObservable from 'zen-observable';\r\nexport var Observable = zenObservable;\r\n//# sourceMappingURL=zenObservable.js.map","dtsmap":{"name":"/Users/hwillson/Documents/git/apollo/apollo-link/packages/zen-observable-ts/zenObservable.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"zenObservable.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"src/zenObservable.ts\"],\"names\":[],\"mappings\":\"AAQA,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAC;AAExC,OAAO,EAAE,aAAa,EAAE,CAAC;AAEzB,oBAAY,QAAQ,CAAC,CAAC,IAAI,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACpD,oBAAY,UAAU,CAAC,CAAC,IAAI,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACxD,oBAAY,cAAc,CAAC,CAAC,IAAI,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;AAEhE,eAAO,MAAM,UAAU,EAAE;IACvB,KAAK,CAAC,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;IAClD,IAAI,CAAC,CAAC,EACJ,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GACzE,UAAU,CAAC,CAAC,CAAC,CAAC;IACjB,EAAE,CAAC,CAAC,EAAE,GAAG,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;CACpB,CAAC;AAEvB,MAAM,WAAW,UAAU,CAAC,CAAC;IAC3B,SAAS,CACP,cAAc,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,KAAK,IAAI,CAAC,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,EAChE,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,KAAK,IAAI,EAC5B,QAAQ,CAAC,EAAE,MAAM,IAAI,GACpB,aAAa,CAAC,YAAY,CAAC;IAE9B,OAAO,CAAC,EAAE,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;IAE/C,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;IAE3C,MAAM,CAAC,EAAE,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,OAAO,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;IAEjD,MAAM,CAAC,CAAC,GAAG,CAAC,EACV,EAAE,EAAE,CAAC,aAAa,EAAE,CAAC,GAAG,CAAC,EAAE,YAAY,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EACpD,YAAY,CAAC,EAAE,CAAC,GAAG,CAAC,GACnB,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAErB,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;IAE7E,IAAI,CAAC,CAAC,EACJ,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GACzE,UAAU,CAAC,CAAC,CAAC,CAAC;IACjB,EAAE,CAAC,CAAC,EAAE,GAAG,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;CACzC\"}"},"dts":{"name":"/Users/hwillson/Documents/git/apollo/apollo-link/packages/zen-observable-ts/zenObservable.d.ts","writeByteOrderMark":false,"text":"import { ZenObservable } from './types';\r\nexport { ZenObservable };\r\nexport declare type Observer<T> = ZenObservable.Observer<T>;\r\nexport declare type Subscriber<T> = ZenObservable.Subscriber<T>;\r\nexport declare type ObservableLike<T> = ZenObservable.ObservableLike<T>;\r\nexport declare const Observable: {\r\n    new <T>(subscriber: Subscriber<T>): Observable<T>;\r\n    from<R>(observable: Observable<R> | ZenObservable.ObservableLike<R> | ArrayLike<R>): Observable<R>;\r\n    of<R>(...args: Array<R>): Observable<R>;\r\n};\r\nexport interface Observable<T> {\r\n    subscribe(observerOrNext: ((value: T) => void) | ZenObservable.Observer<T>, error?: (error: any) => void, complete?: () => void): ZenObservable.Subscription;\r\n    forEach(fn: (value: T) => void): Promise<void>;\r\n    map<R>(fn: (value: T) => R): Observable<R>;\r\n    filter(fn: (value: T) => boolean): Observable<T>;\r\n    reduce<R = T>(fn: (previousValue: R | T, currentValue: T) => R | T, initialValue?: R | T): Observable<R | T>;\r\n    flatMap<R>(fn: (value: T) => ZenObservable.ObservableLike<R>): Observable<R>;\r\n    from<R>(observable: Observable<R> | ZenObservable.ObservableLike<R> | ArrayLike<R>): Observable<R>;\r\n    of<R>(...args: Array<R>): Observable<R>;\r\n}\r\n//# sourceMappingURL=zenObservable.d.ts.map"}}
