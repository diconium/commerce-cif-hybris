/*
 * Copyright 2019 diconium
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Action } from './Action';
import { ErrorResponse } from '@adobe/commerce-cif-model';
import { Input, Output } from '../io';

const InvalidArgumentError = require('@adobe/commerce-cif-common/exception').InvalidArgumentError;

export class SimpleAction<E> extends Action<E> {
  constructor(input: Input) {
    super(input);
  }

  protected doActivation(): Promise<Output<E>> {

    const {
      errorOutput,
    } = this.input;

    if (errorOutput) {
      return Promise.resolve(this.buildErrorOutput(errorOutput));
    }

    return this.client
      .exec()
      .then(response => this.buildSuccessOutput(response))
      .catch(error => this.buildErrorOutput(error));
  }

  private buildErrorOutput(error) {
    return new Output<E>({
      accessToken: this.input.settings.bearer,
      error: Object.assign(new InvalidArgumentError(error.message), error),
      errorType: this.errorType,
    });
  }

  private buildSuccessOutput(response) {
    const { responseExtension, settings } = this.input;

    return new Output<E>({
      body: this.getBodyIfMapperAndResponse(response, responseExtension),
      accessToken: settings.bearer,
      statusCode: this.getStatusCode(response),
    });
  }

  private getBodyIfMapperAndResponse(response, responseExtension) {
    if (!this.mapper || !response) {
      return {};
    }
    const body = this.mapper.mapToEntity(response);
    return Object.assign(body, responseExtension);
  }

  private getStatusCode(response) {
    return response ? 200 : 204;
  }

}
