/*
 * Copyright 2019 diconium
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { CoreUtils } from '../utils';

export class InputSettings {

  HB_BASESITEID: string = undefined;
  HB_CLIENTID: string = undefined;
  HB_CLIENTSECRET: string = undefined;
  HB_USER: string = undefined;
  HB_PASSWORD: string = undefined;
  HB_API_HOST: string = undefined;
  HB_API_BASE_PATH: string = undefined;
  HB_OAUTH_HOST: string = undefined;
  HB_OAUTH_PATH: string = undefined;
  HB_AUTH: string = undefined;
  HB_CATALOG: string = undefined;
  HB_CATALOGVERSION: string = undefined;
  HB_PROTOCOL: string = 'https';
  CT_ASSETS_HOST: string = undefined;
  LOG_LEVEL: string = 'INFO';

  bearer: string;
  language: string;
  cookies: object[];
  headers: any;
  customerId: string;

  constructor(args: any) {
    CoreUtils.mapAllExistingProperties(args, this);

    this.headers = this.extractHeaders(args);
    this.cookies = this.extractCookiesFromHeaders();
    this.bearer = this.extractBearer();
    this.customerId = this.getCustomerId();
    this.language = this.findHeaderValue('accept-language');
  }

  private extractHeaders(args: any) {
    if (args.__ow_headers) {
      return args.__ow_headers;
    }
    return {};
  }

  private extractCookiesFromHeaders(): object[] {
    if (this.headers && this.headers.cookie) {
      const cookies = this.headers.cookie.split('; ');
      return this.getCookies(cookies);
    }
    return [];
  }

  private getCookies(cookies) {
    return cookies.map((cookie) => {
      const cookieObject = {};
      const cookieKeyValue: string[] = cookie.split('=');
      cookieObject[cookieKeyValue[0]] = cookieKeyValue[1];
      return cookieObject;
    });
  }

  private extractBearer() {
    let bearer = this.findCookieValue('ccs-access_token');
    bearer = this.extractedFromAuthorizationHeader(bearer);
    return bearer;
  }

  private findCookieValue(cookieName: string): string {
    const cookie = this.cookies.find(cookie => cookie.hasOwnProperty(cookieName));
    if (cookie) {
      return cookie[cookieName];
    }
    return '';
  }

  private extractedFromAuthorizationHeader(bearer) {
    if (bearer === '') {
      if (this.headers && this.headers.authorization) {
        return this.getAuthorization(this.headers.authorization);
      }
    }
    return bearer;
  }

  private getAuthorization(authorizationHeader) {
    if (authorizationHeader.includes('Bearer ')) {
      return authorizationHeader.split('Bearer ')[1];
    }
    return '';
  }

  private getCustomerId() {
    return this.bearer ? 'current' : 'anonymous';
  }

  private findHeaderValue(headerName: string) {
    const headerValue = this.headers[headerName];
    if (headerValue) {
      return headerValue;
    }
    return '';
  }

}
