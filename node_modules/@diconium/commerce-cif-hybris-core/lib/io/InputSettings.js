"use strict";
/*
 * Copyright 2019 diconium
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
class InputSettings {
    constructor(args) {
        this.HB_BASESITEID = undefined;
        this.HB_CLIENTID = undefined;
        this.HB_CLIENTSECRET = undefined;
        this.HB_USER = undefined;
        this.HB_PASSWORD = undefined;
        this.HB_API_HOST = undefined;
        this.HB_API_BASE_PATH = undefined;
        this.HB_OAUTH_HOST = undefined;
        this.HB_OAUTH_PATH = undefined;
        this.HB_AUTH = undefined;
        this.HB_CATALOG = undefined;
        this.HB_CATALOGVERSION = undefined;
        this.HB_PROTOCOL = 'https';
        this.CT_ASSETS_HOST = undefined;
        this.LOG_LEVEL = 'INFO';
        utils_1.CoreUtils.mapAllExistingProperties(args, this);
        this.headers = this.extractHeaders(args);
        this.cookies = this.extractCookiesFromHeaders();
        this.bearer = this.extractBearer();
        this.customerId = this.getCustomerId();
        this.language = this.findHeaderValue('accept-language');
    }
    extractHeaders(args) {
        if (args.__ow_headers) {
            return args.__ow_headers;
        }
        return {};
    }
    extractCookiesFromHeaders() {
        if (this.headers && this.headers.cookie) {
            const cookies = this.headers.cookie.split('; ');
            return this.getCookies(cookies);
        }
        return [];
    }
    getCookies(cookies) {
        return cookies.map((cookie) => {
            const cookieObject = {};
            const cookieKeyValue = cookie.split('=');
            cookieObject[cookieKeyValue[0]] = cookieKeyValue[1];
            return cookieObject;
        });
    }
    extractBearer() {
        let bearer = this.findCookieValue('ccs-access_token');
        bearer = this.extractedFromAuthorizationHeader(bearer);
        return bearer;
    }
    findCookieValue(cookieName) {
        const cookie = this.cookies.find(cookie => cookie.hasOwnProperty(cookieName));
        if (cookie) {
            return cookie[cookieName];
        }
        return '';
    }
    extractedFromAuthorizationHeader(bearer) {
        if (bearer === '') {
            if (this.headers && this.headers.authorization) {
                return this.getAuthorization(this.headers.authorization);
            }
        }
        return bearer;
    }
    getAuthorization(authorizationHeader) {
        if (authorizationHeader.includes('Bearer ')) {
            return authorizationHeader.split('Bearer ')[1];
        }
        return '';
    }
    getCustomerId() {
        return this.bearer ? 'current' : 'anonymous';
    }
    findHeaderValue(headerName) {
        const headerValue = this.headers[headerName];
        if (headerValue) {
            return headerValue;
        }
        return '';
    }
}
exports.InputSettings = InputSettings;
//# sourceMappingURL=InputSettings.js.map