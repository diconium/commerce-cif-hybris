"use strict";
/*
 * Copyright 2019 diconium
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Action_1 = require("./Action");
const io_1 = require("../io");
const InvalidArgumentError = require('@adobe/commerce-cif-common/exception').InvalidArgumentError;
class SimpleAction extends Action_1.Action {
    constructor(input) {
        super(input);
    }
    doActivation() {
        const { errorOutput, } = this.input;
        if (errorOutput) {
            return Promise.resolve(this.buildErrorOutput(errorOutput));
        }
        return this.client
            .exec()
            .then(response => this.buildSuccessOutput(response))
            .catch(error => this.buildErrorOutput(error));
    }
    buildErrorOutput(error) {
        return new io_1.Output({
            accessToken: this.input.settings.bearer,
            error: Object.assign(new InvalidArgumentError(error.message), error),
            errorType: this.errorType,
        });
    }
    buildSuccessOutput(response) {
        const { responseExtension, settings } = this.input;
        return new io_1.Output({
            body: this.getBodyIfMapperAndResponse(response, responseExtension),
            accessToken: settings.bearer,
            statusCode: this.getStatusCode(response),
        });
    }
    getBodyIfMapperAndResponse(response, responseExtension) {
        if (!this.mapper || !response) {
            return {};
        }
        const body = this.mapper.mapToEntity(response);
        return Object.assign(body, responseExtension);
    }
    getStatusCode(response) {
        return response ? 200 : 204;
    }
}
exports.SimpleAction = SimpleAction;
//# sourceMappingURL=SimpleAction.js.map