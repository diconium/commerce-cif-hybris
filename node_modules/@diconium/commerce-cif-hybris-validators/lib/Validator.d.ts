declare const InputValidator: any;
import { Input, InputSettings, Mapper } from '@diconium/commerce-cif-hybris-core';
export declare class Validator<E> extends InputValidator {
    mapper: Mapper<E>;
    readonly settings: InputSettings;
    constructor(args: any, errorType: string);
    setMapper(mapper: new (settings: InputSettings) => Mapper<E>): this;
    /**
     * Checks if the division between two parameters returns an integer number. The values can be strings as long as they
     * can be coersed into an Number.
     *
     * @param {String} dividend  Name of the parameter to divide.
     * @param {String} divisor  Name of the parameter to divide by.
     * @returns {InputValidator}      Returns 'this' so methods can be chained.
     */
    isIntegerDivision(dividend: string, divisor: string): this;
    /**
     * Use to returns error since the endpoint is not implmented or cannot be implemented in the current commerce tool.
     *
     * @returns {InputValidator}      Returns 'this' so methods can be chained.
     */
    isNotImplemented(): this;
    /**
     * Use to returns error since the endpoint is not implemented or cannot be implemented in the current commerce tool.
     *
     * @returns {InputValidator}      Returns 'this' so methods can be chained.
     */
    isOperationImplemented(validator: any, value: any): this;
    private isInErrorOrNotApplicableError;
    input(): Input;
    private mapActionParameters;
    private mapToSettings;
    private mapError;
}
export {};
//# sourceMappingURL=Validator.d.ts.map