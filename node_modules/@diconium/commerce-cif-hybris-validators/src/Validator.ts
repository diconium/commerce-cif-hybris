/*
 * Copyright 2019 diconium
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// tslint:disable-next-line:variable-name
const InputValidator = require('@adobe/commerce-cif-common/input-validator');
// tslint:disable-next-line:variable-name
const InvalidArgumentError = require('@adobe/commerce-cif-common/exception').InvalidArgumentError;
// tslint:disable-next-line:variable-name
const NotImplementedError = require('@adobe/commerce-cif-common/exception').NotImplementedError;

import { BaseCcifError } from '@adobe/commerce-cif-common';
import { Input, InputSettings, Mapper } from '@diconium/commerce-cif-hybris-core';

export class Validator<E> extends InputValidator {

  mapper: Mapper<E>;
  readonly settings: InputSettings;

  constructor(args: any, errorType: string) {
    super(args, errorType);
    this.settings = this.mapToSettings();
  }

  setMapper(mapper: new (settings: InputSettings) => Mapper<E>) {
    this.mapper = new mapper(this.settings);
    return this;
  }

  /**
   * Checks if the division between two parameters returns an integer number. The values can be strings as long as they
   * can be coersed into an Number.
   *
   * @param {String} dividend  Name of the parameter to divide.
   * @param {String} divisor  Name of the parameter to divide by.
   * @returns {InputValidator}      Returns 'this' so methods can be chained.
   */
  isIntegerDivision(dividend: string, divisor: string) {
    if (this.isInErrorOrNotApplicableError(dividend, divisor)) {
      return this;
    }

    const remainder = Number(this.args[dividend]) % Number(this.args[divisor]);
    if (remainder !== 0) {
      this.error = new InvalidArgumentError(`Division between '${dividend}' and '${divisor}' must be integer.`);
    }

    return this;
  }

  /**
   * Use to returns error since the endpoint is not implmented or cannot be implemented in the current commerce tool.
   *
   * @returns {InputValidator}      Returns 'this' so methods can be chained.
   */
  isNotImplemented() {
    if (this.error) {
      return this;
    }

    this.error = new NotImplementedError('Not implemented');

    return this;
  }

  /**
   * Use to returns error since the endpoint is not implemented or cannot be implemented in the current commerce tool.
   *
   * @returns {InputValidator}      Returns 'this' so methods can be chained.
   */
  isOperationImplemented(validator, value) {
    if (!this.error && validator(value)) {
      this.error = new NotImplementedError('Not implemented');
    }
    return this;
  }

  private isInErrorOrNotApplicableError(dividend: string, divisor: string) {
    return this.error || (this.args[dividend] === undefined && this.args[divisor] === undefined);
  }

  input(): Input {
    return new Input(
      {
        settings: this.settings,
        error: this.mapError(),
        parameters: this.mapActionParameters(),
      });
  }

  private mapActionParameters(): { entity: E, parameters?: any } {
    if (!this.error) {
      return this.mapper.mapFromInputArgsToActionParameters(this.args);
    }
    return undefined;
  }

  private mapToSettings(): InputSettings {
    return new InputSettings(this.args);
  }

  private mapError(): BaseCcifError {
    return this.error;
  }

}
